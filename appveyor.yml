version: 7.50.0.{build}

environment:
    matrix:
      - APPVEYOR_BUILD_WORKER_IMAGE: "Visual Studio 2017"
        BUILD_SYSTEM: CMake
        VSVER: 15
        PRJ_GEN: "Visual Studio 15 2017"
        ARCH: x64
        TARGET: "-A x64"
        PRJ_CFG: Debug
        OPENSSL: ON
        WINSSL: OFF
        HTTP_ONLY: OFF
        TESTING: ON
        SHARED: ON
        DISABLED_TESTS: "!1139"
        COMPILER_PATH: ""
        CUSTOM_OPENSSL_DIST: "https://github.com/iPherian/openssl/releases/download/OpenSSL_1_1_1-stable-build_1.0.56/OpenSSL_1_1_1-stable-shared-debug-x64-vc15-build_1.0.56.zip"
      - APPVEYOR_BUILD_WORKER_IMAGE: "Visual Studio 2017"
        BUILD_SYSTEM: CMake
        VSVER: 15
        PRJ_GEN: "Visual Studio 15 2017"
        ARCH: x64
        TARGET: "-A x64"
        PRJ_CFG: Release
        OPENSSL: ON
        WINSSL: OFF
        HTTP_ONLY: OFF
        TESTING: OFF
        SHARED: ON
        DISABLED_TESTS: ""
        COMPILER_PATH: ""
        CUSTOM_OPENSSL_DIST: "https://github.com/iPherian/openssl/releases/download/OpenSSL_1_1_1-stable-build_1.0.56/OpenSSL_1_1_1-stable-shared-release-x64-vc15-build_1.0.56.zip"
        
clone_depth: 40

skip_tags: true

before_build:
    - ps: >-
        If (1) {
          # create certificate paths
          New-Item -ItemType directory -Path "C:\etc"
          New-Item -ItemType directory -Path "C:\etc\ssl"
          New-Item -ItemType directory -Path "C:\etc\ssl\certs"
          Invoke-WebRequest "https://curl.haxx.se/ca/cacert.pem" -OutFile "C:\etc\ssl\cert.pem"
        }
    - ps: >-
        If (1) {
            Remove-Item -Recurse "C:\OpenSSL-Win32"
            Remove-Item -Recurse "C:\OpenSSL-Win64"
            If ($env:TARGET -Match "x64") {
                $env:REPLACE_OPENSSL_ROOT="C:\OpenSSL-Win64"
            } Else {
                $env:REPLACE_OPENSSL_ROOT="C:\OpenSSL-Win32"
            }
            Remove-Item -Recurse $env:REPLACE_OPENSSL_ROOT
        }
    - call dir C:\
    - ps: >-
        If (1) {
          # test if CUSTOM_OPENSSL_DIST env var has been set
          If ( ($env:OPENSSL -Match "ON") -and (Test-Path env:CUSTOM_OPENSSL_DIST) ) {
              echo "replacing openssl with $env:CUSTOM_OPENSSL_DIST"
              $download_to_loc="$env:APPVEYOR_BUILD_FOLDER\_custom_openssl.zip"
              New-Item -ItemType directory -Path $env:REPLACE_OPENSSL_ROOT
              Invoke-WebRequest $env:CUSTOM_OPENSSL_DIST -OutFile $download_to_loc
              7z x $download_to_loc "-o$env:REPLACE_OPENSSL_ROOT"
          }
        }
    - call dir "%REPLACE_OPENSSL_ROOT%"

install:
    - set "PATH=C:\msys64\usr\bin;%PATH%"
    - if not "%COMPILER_PATH%"=="" (
        set "PATH=%COMPILER_PATH%;%PATH%" )

build_script:
    - if %BUILD_SYSTEM%==CMake (
        cmake .
        -G"%PRJ_GEN%"
        %TARGET%
        -DCMAKE_USE_OPENSSL=%OPENSSL%
        -DCMAKE_USE_WINSSL=%WINSSL%
        -DHTTP_ONLY=%HTTP_ONLY%
        -DBUILD_SHARED_LIBS=%SHARED%
        -DBUILD_TESTING=%TESTING%
        -DCURL_WERROR=ON
        -DENABLE_DEBUG=ON
        -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE=""
        -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG=""
        -DCMAKE_INSTALL_PREFIX="C:/CURL"
        -DCMAKE_BUILD_TYPE=%PRJ_CFG% &&
        cmake --build . --config %PRJ_CFG% --parallel 2 --clean-first -- %BUILD_OPT%
      ) else (
      if %BUILD_SYSTEM%==VisualStudioSolution (
        cd projects &&
        .\\generate.bat %VC_VERSION% &&
        msbuild.exe /p:Configuration="%PRJ_CFG%" "Windows\\%VC_VERSION%\\curl-all.sln"
      ) else (
      if %BUILD_SYSTEM%==winbuild_vs2015 (
        call buildconf.bat &&
        cd winbuild &&
        call "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64 &&
        call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64 &&
        nmake /f Makefile.vc mode=dll VC=14 "SSL_PATH=C:\OpenSSL-v111-Win64" WITH_SSL=dll MACHINE=x64 DEBUG=%DEBUG% &&
        ..\builds\libcurl-vc14-x64-%PATHPART%-dll-ssl-dll-ipv6-sspi\bin\curl.exe -V
      ) else (
      if %BUILD_SYSTEM%==winbuild_vs2017 (
        call buildconf.bat &&
        cd winbuild &&
        call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat" &&
        nmake /f Makefile.vc mode=dll VC=15 "SSL_PATH=C:\OpenSSL-v111-Win64" WITH_SSL=dll MACHINE=x64 DEBUG=%DEBUG% &&
        ..\builds\libcurl-vc15-x64-%PATHPART%-dll-ssl-dll-ipv6-sspi\bin\curl.exe -V
      ) else (
      if %BUILD_SYSTEM%==autotools (
        bash.exe -e -l -c "cd /c/projects/curl && ./buildconf && ./configure %CONFIG_ARGS% && make && make examples && cd tests && make"
      )))))

test_script:
    - if %TESTING%==ON (
        bash.exe -e -l -c "cd /c/projects/curl/tests && ./runtests.pl -a -p !flaky %DISABLED_TESTS%" )
        
after_build:
    - ps: >-
        If (1) {
        
        
        }

artifacts:
  - path: '**/curl.exe'
    name: curl
  - path: '**/libcurl.dll'
    name: libcurl
  - path: '.'
    name: '$(APPVEYOR_REPO_BRANCH)-$(PRJ_CFG)-$(ARCH)-vc$(VSVER)-build_$(APPVEYOR_BUILD_VERSION)-all'
