version: 7.50.0.{build}

environment:
    matrix:
      - APPVEYOR_BUILD_WORKER_IMAGE: "Visual Studio 2017"
        BUILD_SYSTEM: CMake
        VSVER: 15
        PRJ_GEN: "Visual Studio 15 2017"
        ARCH: x64
        TARGET: "-A x64"
        PRJ_CFG: Debug
        OPENSSL: ON
        WINSSL: OFF
        HTTP_ONLY: OFF
        TESTING: OFF
        SHARED: ON
        DISABLED_TESTS: "!1139"
        COMPILER_PATH: ""
        CUSTOM_OPENSSL_DIST: "https://github.com/iPherian/openssl/releases/download/OpenSSL_1_1_1-stable-build_1.0.56/OpenSSL_1_1_1-stable-shared-debug-x64-vc15-build_1.0.56.zip"
      - APPVEYOR_BUILD_WORKER_IMAGE: "Visual Studio 2017"
        BUILD_SYSTEM: CMake
        VSVER: 15
        PRJ_GEN: "Visual Studio 15 2017"
        ARCH: x64
        TARGET: "-A x64"
        PRJ_CFG: Release
        OPENSSL: ON
        WINSSL: OFF
        HTTP_ONLY: OFF
        TESTING: OFF
        SHARED: ON
        DISABLED_TESTS: ""
        COMPILER_PATH: ""
        CUSTOM_OPENSSL_DIST: "https://github.com/iPherian/openssl/releases/download/OpenSSL_1_1_1-stable-build_1.0.56/OpenSSL_1_1_1-stable-shared-release-x64-vc15-build_1.0.56.zip"
        
clone_depth: 40

skip_tags: true

before_build:
    - ps: >-
        If (1) {
          # create certificate paths
          New-Item -ItemType directory -Path "C:\etc\ssl\certs" | Out-Null
          Invoke-WebRequest "https://curl.haxx.se/ca/cacert.pem" -OutFile "C:\etc\ssl\cert.pem"
        }
    - ps: >-
        If (1) {
            $dir_prefix_list = @("", "v11-", "v111-")
            $arch_list = @("Win32", "Win64")
            Foreach ($dir_prefix in $dir_prefix_list) {
                Foreach ($arch in $arch_list) {
                    Remove-Item -Recurse "C:\OpenSSL-$($dir_prefix)$($arch)" -ErrorAction SilentlyContinue 
                }
            }
            If ($env:TARGET -Match "x64") {
                $env:REPLACE_OPENSSL_ROOT="C:\OpenSSL-Win64"
            } Else {
                $env:REPLACE_OPENSSL_ROOT="C:\OpenSSL-Win32"
            }
        }
    #- call dir C:\
    - ps: >-
        If (1) {
          # test if CUSTOM_OPENSSL_DIST env var has been set
          If ( ($env:OPENSSL -Match "ON") -and (Test-Path env:CUSTOM_OPENSSL_DIST) ) {
              echo "replacing openssl with $env:CUSTOM_OPENSSL_DIST"
              $download_to_loc="$env:APPVEYOR_BUILD_FOLDER\_custom_openssl.zip"
              New-Item -ItemType directory -Path $env:REPLACE_OPENSSL_ROOT | Out-Null
              Invoke-WebRequest $env:CUSTOM_OPENSSL_DIST -OutFile $download_to_loc
              7z x $download_to_loc "-o$env:REPLACE_OPENSSL_ROOT" | Out-Null
          }
        }

install:
    - set "PATH=C:\msys64\usr\bin;%PATH%"
    - if not "%COMPILER_PATH%"=="" (
        set "PATH=%COMPILER_PATH%;%PATH%" )

build_script:
    - if %BUILD_SYSTEM%==CMake (
        cmake .
        -G"%PRJ_GEN%"
        %TARGET%
        -DCMAKE_USE_OPENSSL=%OPENSSL%
        -DCMAKE_USE_WINSSL=%WINSSL%
        -DHTTP_ONLY=%HTTP_ONLY%
        -DBUILD_SHARED_LIBS=%SHARED%
        -DBUILD_TESTING=%TESTING%
        -DCURL_WERROR=ON
        -DENABLE_DEBUG=ON
        -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE=""
        -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG=""
        -DCMAKE_INSTALL_PREFIX="C:/CURL"
        -DCMAKE_BUILD_TYPE=%PRJ_CFG% &&
        cmake --build . --config %PRJ_CFG% --parallel 2 --clean-first -- %BUILD_OPT%
      ) else (
      if %BUILD_SYSTEM%==VisualStudioSolution (
        cd projects &&
        .\\generate.bat %VC_VERSION% &&
        msbuild.exe /p:Configuration="%PRJ_CFG%" "Windows\\%VC_VERSION%\\curl-all.sln"
      ) else (
      if %BUILD_SYSTEM%==winbuild_vs2015 (
        call buildconf.bat &&
        cd winbuild &&
        call "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64 &&
        call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64 &&
        nmake /f Makefile.vc mode=dll VC=14 "SSL_PATH=C:\OpenSSL-v111-Win64" WITH_SSL=dll MACHINE=x64 DEBUG=%DEBUG% &&
        ..\builds\libcurl-vc14-x64-%PATHPART%-dll-ssl-dll-ipv6-sspi\bin\curl.exe -V
      ) else (
      if %BUILD_SYSTEM%==winbuild_vs2017 (
        call buildconf.bat &&
        cd winbuild &&
        call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat" &&
        nmake /f Makefile.vc mode=dll VC=15 "SSL_PATH=C:\OpenSSL-v111-Win64" WITH_SSL=dll MACHINE=x64 DEBUG=%DEBUG% &&
        ..\builds\libcurl-vc15-x64-%PATHPART%-dll-ssl-dll-ipv6-sspi\bin\curl.exe -V
      ) else (
      if %BUILD_SYSTEM%==autotools (
        bash.exe -e -l -c "cd /c/projects/curl && ./buildconf && ./configure %CONFIG_ARGS% && make && make examples && cd tests && make"
      )))))

test_script:
    - if %TESTING%==ON (
        bash.exe -e -l -c "cd /c/projects/curl/tests && ./runtests.pl -a -p !flaky %DISABLED_TESTS%" )
        
after_build:
    - ps: >-
        If (1) {
          Set-Location -Path $env:APPVEYOR_BUILD_FOLDER
          $release_dir="tmp_release"
          New-Item -ItemType directory -Path $release_dir | Out-Null
          $env:RELEASE_MIN_DIR=($release_dir+"\min")
          function make_release_min_dir {
            Foreach ( $rel_path in $args ) {
          		New-Item -ItemType directory -Path ($env:RELEASE_MIN_DIR+$rel_path) | Out-Null
          	}
          }
          make_release_min_dir "" "\bin" "\lib" "\exp" "\include"
          $robocopy_opts=@('/COPYALL', '/E', '/FP', '/NP')
          $build_out_dir_main=("src")
          $build_out_dir_lib=("lib")
          $orig_include_dir=($env:APPVEYOR_BUILD_FOLDER+"\include")
          Function filter_file {
                [CmdletBinding()]
                Param( [parameter( Mandatory = $true, ValueFromPipeline = $true)]
                        $file )
                process {
                    if ( $file.Name -ne "vc141.pdb" ) {
                        $file
                    }
                }
            }
          function copy_flatten_tree($src_recurse, $dest, $ext_list) {
            Foreach ( $ext in $ext_list ) {
                get-Childitem -Path $src_recurse -recurse -filter $ext | filter_file | Copy-Item -Destination $dest
            }
          }
          # into <archive_root>/bin goes the exe and anything required to run it
          copy_flatten_tree $build_out_dir_main ($env:RELEASE_MIN_DIR+"\bin") @("*.dll", "*.exe", "*.pdb")
          copy_flatten_tree $build_out_dir_lib ($env:RELEASE_MIN_DIR+"\bin") @("*.dll", "*.exe", "*.pdb")
          # into <archive_root>/lib goes the implibs
          copy_flatten_tree $build_out_dir_main ($env:RELEASE_MIN_DIR+"\lib") @("*.lib")
          copy_flatten_tree $build_out_dir_lib ($env:RELEASE_MIN_DIR+"\lib") @("*.lib")
          # into <archive_root>/exp goes the export descriptions for the libraries
          copy_flatten_tree $build_out_dir_main ($env:RELEASE_MIN_DIR+"\exp") @("*.exp")
          copy_flatten_tree $build_out_dir_lib ($env:RELEASE_MIN_DIR+"\exp") @("*.exp")
          # into <archive_root>/include goes the include files
          robocopy $orig_include_dir ($env:RELEASE_MIN_DIR+"\include") "*.h" $robocopy_opts | Out-Null
          
          Set-Location -Path $env:RELEASE_MIN_DIR
          $env:RELEASE_MIN_BASENAME=($env:APPVEYOR_REPO_BRANCH+"-"+$env:PRJ_CFG+"-"+$env:ARCH+"-vc"+$env:VSVER+"-build_"+$env:APPVEYOR_BUILD_VERSION)
          $env:RELEASE_MIN_FILENAME=($env:RELEASE_MIN_BASENAME+".zip")
          7z a ($env:APPVEYOR_BUILD_FOLDER+"\"+$env:RELEASE_MIN_FILENAME) "*" | Out-Null
          Set-Location -Path $env:APPVEYOR_BUILD_FOLDER
          Remove-Item -Recurse $env:RELEASE_MIN_DIR -ErrorAction SilentlyContinue
        }

artifacts:
    - path: '$(RELEASE_MIN_FILENAME)'
      name: '$(RELEASE_MIN_FILENAME)'
      type: Zip
    #- path: '**/curl.exe'
    #  name: curl
    #- path: '**/libcurl.dll'
    #  name: libcurl
    #- path: '**/libcurl-d.dll'
    #  name: libcurl-d
    #- path: 'src'
    #  name: '$(RELEASE_MIN_BASENAME)-src-all'
    #- path: 'lib'
    #  name: '$(RELEASE_MIN_BASENAME)-lib-all'
    #- path: 'include'
    #  name: '$(RELEASE_MIN_BASENAME)-include-all'
    #- path: 'tests'
    #  name: '$(RELEASE_MIN_BASENAME)-tests-all'
